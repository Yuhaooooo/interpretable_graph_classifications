# conda environments:
#
base                     /apps/anaconda3
DGCNN                    /home/FYP/heyu0012/.conda/envs/DGCNN
GCNN_GAP                 /home/FYP/heyu0012/.conda/envs/GCNN_GAP
GCNN_GAP_graphgen     *  /home/FYP/heyu0012/.conda/envs/GCNN_GAP_graphgen
graphgen                 /home/FYP/heyu0012/.conda/envs/graphgen
pytorch                  /home/FYP/heyu0012/.conda/envs/pytorch

====== begin of gnn configuration ======
| msg_average = 0
======   end of gnn configuration ======
Using backend: pytorch
/home/FYP/heyu0012/.conda/envs/GCNN_GAP_graphgen/lib/python3.6/site-packages/torch/nn/modules/rnn.py:50: UserWarning: dropout option adds dropout after all but last recurrent layer, so non-zero dropout expects num_layers greater than 1, but got dropout=0.2 and num_layers=1
  "num_layers={}".format(dropout, num_layers))


torch.cuda.is_available():  True 


*** 1 train_index:  [  0   2   3   6   9  10  11  12  13  14  15  16  17  19  20  21  22  23
  24  26  27  30  31  32  33  35  36  38  39  41  42  43  44  45  46  47
  48  49  50  52  53  54  56  57  59  60  61  62  63  64  65  66  67  69
  70  71  72  73  74  76  77  78  79  80  81  82  83  84  87  88  89  91
  92  94  95  96  97  98 100 101 102 103 104 106 107 108 109 110 112 113
 115 116 117 118 119 120 121 122 124 125 126 127 129 130 131 132 134 136
 138 139 140 141 142 144 145 146 147 148 149 151 152 153 154 155 156 157
 158 159 160 161 164 165 166 167 169 170 171 172 173 175 176 177 178 179
 180 182 184 185 186 187]
*** 2 test_index:  [  1   4   5   7   8  18  25  28  29  34  37  40  51  55  58  68  75  85
  86  90  93  99 105 111 114 123 128 133 135 137 143 150 162 163 168 174
 181 183]
*** 1 train_index:  [  0   1   2   4   5   6   7   8  10  11  12  13  14  15  16  17  18  19
  20  21  22  24  25  26  27  28  29  30  32  33  34  35  36  37  38  39
  40  41  43  44  45  46  49  50  51  52  53  54  55  56  58  59  60  61
  62  63  64  65  66  67  68  69  70  71  74  75  76  77  79  80  81  82
  83  84  85  86  88  90  91  92  93  94  96  97  98  99 101 102 103 104
 105 106 107 111 112 113 114 115 120 121 122 123 124 125 126 128 129 130
 131 133 134 135 136 137 138 139 140 143 144 145 147 148 150 153 154 155
 156 159 162 163 164 165 167 168 169 170 171 172 173 174 175 177 178 179
 180 181 182 183 186 187]
*** 2 test_index:  [  3   9  23  31  42  47  48  57  72  73  78  87  89  95 100 108 109 110
 116 117 118 119 127 132 141 142 146 149 151 152 157 158 160 161 166 176
 184 185]
*** 1 train_index:  [  1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  17  18  19
  20  23  24  25  26  28  29  31  32  34  35  36  37  38  40  41  42  43
  44  47  48  51  53  54  55  56  57  58  59  60  64  66  68  70  71  72
  73  74  75  76  77  78  79  81  82  84  85  86  87  88  89  90  92  93
  95  96  97  98  99 100 104 105 106 107 108 109 110 111 112 113 114 115
 116 117 118 119 120 121 123 124 125 126 127 128 129 130 131 132 133 134
 135 137 139 140 141 142 143 144 146 148 149 150 151 152 153 156 157 158
 159 160 161 162 163 165 166 167 168 169 171 172 173 174 175 176 177 178
 179 181 183 184 185 186]
*** 2 test_index:  [  0  16  21  22  27  30  33  39  45  46  49  50  52  61  62  63  65  67
  69  80  83  91  94 101 102 103 122 136 138 145 147 154 155 164 170 180
 182 187]
*** 1 train_index:  [  0   1   3   4   5   6   7   8   9  13  14  16  18  19  21  22  23  25
  26  27  28  29  30  31  33  34  36  37  38  39  40  42  43  45  46  47
  48  49  50  51  52  53  55  56  57  58  60  61  62  63  65  66  67  68
  69  71  72  73  75  76  77  78  79  80  81  83  84  85  86  87  88  89
  90  91  92  93  94  95  97  98  99 100 101 102 103 105 106 108 109 110
 111 113 114 115 116 117 118 119 120 121 122 123 125 127 128 131 132 133
 134 135 136 137 138 140 141 142 143 144 145 146 147 148 149 150 151 152
 154 155 156 157 158 160 161 162 163 164 165 166 168 170 171 174 175 176
 180 181 182 183 184 185 187]
*** 2 test_index:  [  2  10  11  12  15  17  20  24  32  35  41  44  54  59  64  70  74  82
  96 104 107 112 124 126 129 130 139 153 159 167 169 172 173 177 178 179
 186]
*** 1 train_index:  [  0   1   2   3   4   5   7   8   9  10  11  12  15  16  17  18  20  21
  22  23  24  25  27  28  29  30  31  32  33  34  35  37  39  40  41  42
  44  45  46  47  48  49  50  51  52  54  55  57  58  59  61  62  63  64
  65  67  68  69  70  72  73  74  75  78  80  82  83  85  86  87  89  90
  91  93  94  95  96  99 100 101 102 103 104 105 107 108 109 110 111 112
 114 116 117 118 119 122 123 124 126 127 128 129 130 132 133 135 136 137
 138 139 141 142 143 145 146 147 149 150 151 152 153 154 155 157 158 159
 160 161 162 163 164 166 167 168 169 170 172 173 174 176 177 178 179 180
 181 182 183 184 185 186 187]
*** 2 test_index:  [  6  13  14  19  26  36  38  43  53  56  60  66  71  76  77  79  81  84
  88  92  97  98 106 113 115 120 121 125 131 134 140 144 148 156 165 171
 175]
{'base_path': '/home/FYP/heyu0012/results/interpretable_graph_classifications/graphgen/DfsRNN_MUTAG_classification/datasets/MUTAG/',
 'batch_size': 1,
 'clean_temp': False,
 'clean_tensorboard': False,
 'current_dataset_path': '/home/FYP/heyu0012/results/interpretable_graph_classifications/graphgen/DfsRNN_MUTAG_classification/datasets/MUTAG/graphs/',
 'current_min_dfscode_path': None,
 'current_model_save_path': '/home/FYP/heyu0012/results/interpretable_graph_classifications/graphgen/DfsRNN_MUTAG_classification/model_save/DFScodeRNN_cls_MUTAG_2021-01-07-19-32-53/',
 'current_processed_dataset_path': '/home/FYP/heyu0012/results/interpretable_graph_classifications/graphgen/DfsRNN_MUTAG_classification/datasets/MUTAG/min_dfscode_tensors/',
 'current_temp_path': '/home/FYP/heyu0012/results/interpretable_graph_classifications/graphgen/DfsRNN_MUTAG_classification/tmp/DFScodeRNN_cls_MUTAG_2021-01-07-19-32-53/',
 'dataset_path': '/home/FYP/heyu0012/results/interpretable_graph_classifications/graphgen/DfsRNN_MUTAG_classification/datasets/',
 'device': device(type='cuda', index=0),
 'dfscode_rnn_dropout': 0.2,
 'dir_input': '/home/FYP/heyu0012/results/interpretable_graph_classifications/graphgen/DfsRNN_MUTAG_classification/',
 'embedding_size_dfscode_rnn': 8,
 'epochs': 10000,
 'epochs_end': 10000,
 'epochs_save': 20,
 'epochs_validate': 1,
 'fname': 'DFScodeRNN_cls_MUTAG',
 'gamma': 0.3,
 'gradient_clipping': True,
 'graph_type': 'MUTAG',
 'hidden_size_dfscode_rnn': 4,
 'load_device': device(type='cuda', index=0),
 'load_model': False,
 'load_model_path': '',
 'log_tensorboard': False,
 'loss_type': 'BCE',
 'lr': 0.003,
 'max_prev_node': None,
 'milestones': [100, 200, 400, 800],
 'min_dfscode_path': '/home/FYP/heyu0012/results/interpretable_graph_classifications/graphgen/DfsRNN_MUTAG_classification/datasets/MUTAG/min_dfscodes/',
 'min_dfscode_tensor_path': '/home/FYP/heyu0012/results/interpretable_graph_classifications/graphgen/DfsRNN_MUTAG_classification/datasets/MUTAG/min_dfscode_tensors/',
 'model_save_path': '/home/FYP/heyu0012/results/interpretable_graph_classifications/graphgen/DfsRNN_MUTAG_classification/model_save/',
 'note': 'DFScodeRNN_cls',
 'num_graphs': None,
 'num_layers': 1,
 'num_workers': 8,
 'produce_graphs': False,
 'produce_min_dfscode_tensors': False,
 'produce_min_dfscodes': False,
 'rnn_type': 'LSTM',
 'save_model': True,
 'temp_path': '/home/FYP/heyu0012/results/interpretable_graph_classifications/graphgen/DfsRNN_MUTAG_classification/tmp/',
 'tensorboard_path': '/home/FYP/heyu0012/results/interpretable_graph_classifications/graphgen/DfsRNN_MUTAG_classification/tensorboard/',
 'time': '2021-01-07-19-32-53',
 'weights': False}


graphgen args.__dict__: None




dataset_features: {'node_forward': {'0': 0, '1': 1, '2': 2, '3': 3, '5': 4, '6': 5, '4': 6}, 'node_backward': {0: '0', 1: '1', 2: '2', 3: '3', 4: '5', 5: '6', 6: '4'}, 'edge_forward': {'0': 0}, 'edge_backward': {0: '0'}, 'max_nodes': 28, 'min_nodes': 10, 'max_edges': 33, 'min_edges': 10, 'max_degree': 4, 'label_size': 2}




config: {'general': {'data_autobalance': False, 'print_dataset_features': True, 'batch_size': 1, 'extract_features': False}, 'run': {'num_epochs': 1, 'learning_rate': 0.0001, 'seed': 1800, 'k_fold': 5, 'model': 'DFScodeRNN_cls', 'dataset': 'MUTAG'}, 'GNN_models': {'DGCNN': {'convolution_layers_size': '32-32-32-1', 'sortpooling_k': 0.6, 'n_hidden': 128, 'convolution_dropout': 0.5, 'pred_dropout': 0.5, 'FP_len': 0}, 'GCN': {'convolution_layers_size': '128-256-512', 'dropout': 0.5}, 'GCND': {'convolution_layers_size': '128-256-512', 'dropout': 0.5}, 'DiffPool': {'convolution_layers_size': '64-64-64', 'pred_hidden_layers': '50-50-50', 'assign_ratio': 0.25, 'number_of_pooling': 1, 'concat_tensors': False}, 'DiffPoolD': {'convolution_layers_size': '64-64-64', 'pred_hidden_layers': '50-50-50', 'assign_ratio': 0.25, 'number_of_pooling': 1, 'concat_tensors': False}, 'DFScodeRNN_cls': {'dummy': 0}}, 'interpretability_methods': {'DeepLIFT': {'enabled': False, 'compare_with_zero_tensor': True, 'compare_with_isomorphic_samples': True, 'number_of_zero_tensor_samples': 3, 'sample_ids': None, 'number_of_isomorphic_sample_pairs': 5}, 'saliency': {'enabled': False, 'number_of_samples': 3, 'sample_ids': None}, 'LayerGradCAM': {'enabled': False, 'number_of_samples': 3, 'sample_ids': None, 'layer': 0, 'assign_attribution': 'hard'}}, 'metrics': {'fidelity': {'enabled': True, 'importance_range': '0.5,1'}, 'contrastivity': {'enabled': True, 'importance_range': '0.5,1'}, 'sparsity': {'enabled': True, 'importance_range': '0.5,1'}}, 'custom_visualisation_options': {'GNN_models': {'DiffPool': {'cluster_nodes': True}}, 'dataset': {'MUTAG': {'custom_mapping': {'0': 'C', '1': 'N', '2': 'O', '3': 'F', '4': 'I', '5': 'Cl', '6': 'Br'}}}}, 'dataset_features': {'node_forward': {'0': 0, '1': 1, '2': 2, '3': 3, '5': 4, '6': 5, '4': 6}, 'node_backward': {0: '0', 1: '1', 2: '2', 3: '3', 4: '5', 5: '6', 6: '4'}, 'edge_forward': {'0': 0}, 'edge_backward': {0: '0'}, 'max_nodes': 28, 'min_nodes': 10, 'max_edges': 33, 'min_edges': 10, 'max_degree': 4, 'label_size': 2}}


Training a new model: DFScodeRNN_cls
Training model with dataset, testing using fold 0
*** 4 len(sample_idxes):  150
*** 5 sample_idxes:  [0, 2, 3, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 26, 27, 30, 31, 32, 33, 35, 36, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 87, 88, 89, 91, 92, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 112, 113, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 129, 130, 131, 132, 134, 136, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 164, 165, 166, 167, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 182, 184, 185, 186, 187]
*** 6 total_iters: 150
*** 7 classifier: SequentialModel(
  (dfs_code_rnn): RNN(
    (input): Linear(in_features=76, out_features=8, bias=True)
    (rnn): LSTM(8, 4, batch_first=True, dropout=0.2)
  )
  (output_layer): MLP_onelayer(
    (mlp): Sequential(
      (0): Linear(in_features=4, out_features=1, bias=True)
    )
  )
)
*** 7 dfscode_tensor: {'t1': tensor([ 0,  1,  2,  3,  4,  5,  5,  6,  7,  8,  9,  9, 10, 11, 12, 13, 12, 14,
        14, 28, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29]), 't2': tensor([ 1,  2,  3,  4,  5,  0,  6,  7,  8,  9,  0, 10, 11, 12, 13,  8, 14, 15,
        16, 28, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29]), 'v1': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 7, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8]), 'e': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2]), 'v2': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 7, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8]), 'len': 19}
*** 7 batch_graph_tensors: tensor([[[1., 0., 0.,  ..., 0., 0., 0.],
         [0., 1., 0.,  ..., 0., 0., 0.],
         [0., 0., 1.,  ..., 0., 0., 0.],
         ...,
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.]]])
*** 7 batch_graph_tensors.size(): torch.Size([1, 34, 76])
output: tensor([[[ 0.3533,  0.1396, -0.0167,  0.2654],
         [ 0.4033,  0.2031,  0.1659,  0.4378],
         [ 0.3931,  0.2120,  0.2524,  0.4269],
         [ 0.4337,  0.3963,  0.3712,  0.4602],
         [ 0.3652,  0.4857,  0.4327,  0.3909],
         [ 0.4237,  0.6319,  0.4706,  0.6033],
         [ 0.3578,  0.5924,  0.4797,  0.5537],
         [ 0.3993,  0.6707,  0.5298,  0.5695],
         [ 0.4307,  0.6638,  0.5245,  0.3789],
         [ 0.3660,  0.7163,  0.4818,  0.5058],
         [ 0.3574,  0.6909,  0.5253,  0.5640],
         [ 0.3264,  0.6690,  0.5330,  0.5589],
         [ 0.3534,  0.6820,  0.4997,  0.5123],
         [ 0.3596,  0.6882,  0.4694,  0.3948],
         [ 0.3733,  0.7013,  0.5030,  0.4865],
         [ 0.3752,  0.6279,  0.5048,  0.2823],
         [ 0.3469,  0.6698,  0.5320,  0.4489],
         [ 0.4496,  0.7166,  0.4915,  0.4730],
         [ 0.3898,  0.7071,  0.5224,  0.4349],
         [ 0.1025,  0.5493,  0.4193,  0.0572],
         [ 0.1702,  0.6480,  0.5175,  0.0085],
         [ 0.2023,  0.6507,  0.5224, -0.0462],
         [ 0.2172,  0.6448,  0.5242, -0.0708],
         [ 0.2233,  0.6398,  0.5262, -0.0805],
         [ 0.2262,  0.6362,  0.5279, -0.0841],
         [ 0.2278,  0.6334,  0.5291, -0.0852],
         [ 0.2289,  0.6314,  0.5299, -0.0853],
         [ 0.2297,  0.6298,  0.5304, -0.0851],
         [ 0.2304,  0.6287,  0.5307, -0.0848],
         [ 0.2308,  0.6279,  0.5308, -0.0845],
         [ 0.2312,  0.6273,  0.5309, -0.0842],
         [ 0.2315,  0.6268,  0.5310, -0.0839],
         [ 0.2316,  0.6265,  0.5310, -0.0838],
         [ 0.2318,  0.6263,  0.5310, -0.0836]]], device='cuda:0',
       grad_fn=<CudnnRnnBackward>)
output.size() torch.Size([1, 34, 4])
output: tensor([0.8368], device='cuda:0', grad_fn=<UnsqueezeBackward0>)
logits: tensor([0.8368], device='cuda:0', grad_fn=<UnsqueezeBackward0>)
prob: tensor([0.8368], device='cuda:0', grad_fn=<UnsqueezeBackward0>)
labels: tensor([1.], device='cuda:0')
Traceback (most recent call last):
  File "main.py", line 477, in <module>
    optimizer=optimizer)
  File "main.py", line 163, in loop_dataset_DFSRNN
    total_loss.append( np.array([loss, acc]) * len(selected_idx))
NameError: name 'acc' is not defined
